From e219ade7ba8c651c98cdeff56cfbbd8ca50535e5 Mon Sep 17 00:00:00 2001
From: Siddharth Garewal <sidgarewal@gmail.com>
Date: Sat, 4 Jul 2020 15:36:23 +0530
Subject: [PATCH] Create Patch File

---
 0001-Create-Patch-File.patch | 101 +++++++++++++++++++++++++++++++++++
 client3.py                   |   1 +
 client_test.py               |  25 ++++++++-
 3 files changed, 126 insertions(+), 1 deletion(-)
 create mode 100644 0001-Create-Patch-File.patch

diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
new file mode 100644
index 0000000..5e80e41
--- /dev/null
+++ b/0001-Create-Patch-File.patch
@@ -0,0 +1,101 @@
+From ebb47421612305afbb2ed3761c5cccb818b41efd Mon Sep 17 00:00:00 2001
+From: Siddharth Garewal <sidgarewal@gmail.com>
+Date: Sat, 4 Jul 2020 15:20:37 +0530
+Subject: [PATCH] Create Patch File
+
+---
+ __pycache__/client3.cpython-37.pyc | Bin 0 -> 1133 bytes
+ client3.py                         |  12 ++++++++----
+ client_test.py                     |   5 ++++-
+ 3 files changed, 12 insertions(+), 5 deletions(-)
+ create mode 100644 __pycache__/client3.cpython-37.pyc
+
+diff --git a/__pycache__/client3.cpython-37.pyc b/__pycache__/client3.cpython-37.pyc
+new file mode 100644
+index 0000000000000000000000000000000000000000..3d95152b512ca20d8e8e2129790d92885015dfe0
+GIT binary patch
+literal 1133
+zcmYjQ&2Aev5GHrItCcOeiQ}ILxv&L-R6ra%$i)znHjSJX2pYqQ5d<YvENF3LZM@o*
+zNvg0_`Q#q*81k`?(Q6NVfW7vVdrv)eNZCP2%+E)TW@kQ*UNoCa1lPxBB>kgK$lng!
+zEX3qFiuntbB8uijP;UbfcpHk)TPBzaM5ICyE2g5~h^VPp)zBtTSIJ4B|2+E$OAueu
+zJ@WHREJHYN0R7OMuRt{a0@$2gkt=#d=eL{{w=*JE&vxN9M(>C_P=h;{w8zAnSQi^&
+z6E<NL)}9i$tLm@@>#zZv1GYgfDJ7?8@7?(lB(SQMTLg8ZMJ|Ku+gI<gk3-UKe!`x}
+z{`AYCwd2nAc3$>nJ}iyx?C$LDY@bd*pMRUFXTM%#|4>5uD1Jq#8A=z$JV!Odd@XW8
+zt@DBwQ6YYfUIZSq&p4a~vv8BB=pMOXGwRTc4H#AuPdofTmuk`nF7uq118#@F3jhU*
+z|044V7;Z~`3<YRuF^DT^<+#iW%d5!PvVT(5Y&lMkGF3%mo%LaXr8)T&V2N#7MT5MQ
+zwjEW`>7=xv-EmdNAEb-;I>s(s?YjG&=w&qj{@CsG-WkxQcbF+Pl-dq^du4wzg2I~K
+zs{{VJ)W@>m-Jvvq_;q*7LVvhrG2PbVt?~JjUO&$;_{pR3dDS=uyN9J8_|h@I@v|2u
+z^cL<0)lEF>yVBfp)`@3&4V@WP6ep>nf<xqbM(+`1FPwhGe*nvonXGi&`F>K#WudP9
+zBd*=+?faJ6fv8=F+&D-6VxbxsSS48JTbHkm$i%1!ODLmy#owmsNM=QvP9MB+Tq=Iw
+zaB2D1$Y$rhdC0MMZ~bS`YflrO4dbftyBFOm+<W<byCqg8I?uDCM;dV2j1}<$SIlN3
+z5bT2~3lVGVqa2Co&AXRxf2!!d=jd}Gg&aYeRuM)WLq*ZUXI4hkZgSQzXE}zViU*}0
+zNn0@uQdO~^0wZEyqtOXA=4V2?|Gak3;^)ARQ(^x{kQ)oVVCm@yhc<_A*73-2R0;Jv
+WWFZTZI__|V@{rLbeBFfJ4gLe5=pgX`
+
+literal 0
+HcmV?d00001
+
+diff --git a/client3.py b/client3.py
+index f1771c3..6e14547 100644
+--- a/client3.py
++++ b/client3.py
+@@ -35,25 +35,29 @@ def getDataPoint(quote):
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+-	price = bid_price
++	price = (bid_price + ask_price) / 2
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+ 	""" Get ratio of price_a and price_b """
+ 	""" ------------- Update this function ------------- """
+ 	""" Also create some unit tests for this function in client_test.py """
+-	return 1
++	if price_b == 0:
++		return 
++	return price_a/price_b
+ 
+ # Main
+ if __name__ == "__main__":
+ 
+ 	# Query the price once every N seconds.
+-	for _ in iter(range(N)):
++	for _ in range(N):
+ 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+ 		""" ----------- Update to get the ratio --------------- """
++		prices = {}
+ 		for quote in quotes:
+ 			stock, bid_price, ask_price, price = getDataPoint(quote)
++			prices[stock] = price
+ 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-		print ("Ratio %s" % getRatio(price, price))
++		print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
+diff --git a/client_test.py b/client_test.py
+index af2bf26..92bf766 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+ 
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+@@ -15,7 +17,8 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
+-
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+ 
+   """ ------------ Add more unit tests ------------ """
+ 
+-- 
+2.23.0.windows.1
+
diff --git a/client3.py b/client3.py
index 6e14547..080e213 100644
--- a/client3.py
+++ b/client3.py
@@ -43,6 +43,7 @@ def getRatio(price_a, price_b):
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
 	if price_b == 0:
+		# when price_b is 0 avoid throwing ZeroDivisionError
 		return 
 	return price_a/price_b
 
diff --git a/client_test.py b/client_test.py
index 92bf766..9b708aa 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -21,7 +21,30 @@ class ClientTest(unittest.TestCase):
       self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio_priceBZero(self):
+    price_a = 119.2
+    price_b = 0
+    self.assertIsNone(getRatio(price_a, price_b))
+ 
+  def test_getRatio_priceAZero(self):
+    price_a = 0
+    price_b = 121.68
+    self.assertEqual(getRatio(price_a, price_b), 0)
+ 
+  def test_getRatio_greaterThan1(self):
+    price_a = 346.48
+    price_b = 166.39
+    self.assertGreater(getRatio(price_a, price_b), 1)
 
+  def test_getRatio_LessThan1(self):
+    price_a = 166.39
+    price_b = 356.48
+    self.assertLess(getRatio(price_a, price_b), 1)
+
+  def test_getRatio_exactlyOne(self):
+    price_a = 356.48
+    price_b = 356.48
+    self.assertEqual(getRatio(price_a, price_b), 1)
 
 
 if __name__ == '__main__':
-- 
2.23.0.windows.1

